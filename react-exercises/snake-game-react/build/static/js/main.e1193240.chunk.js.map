{"version":3,"sources":["SnakeBody.js","Food.js","GridBlock.js","GameMap.js","App.js","index.js"],"names":["SnakeSegment","className","Food","GridBlock","useState","score","setScore","direction","setDirection","initializeMap","grid","setGrid","x","y","snake","setSnake","repositionFood","food","setFood","placeFood","placeSnake","document","addEventListener","e","func","keyCode","onInput","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newHead","newPosition","newSnake","func1","func2","proceed","outOfBounds","collidedWithSelf","alert","ateFood","pop","map","key","Math","random","floor","forEach","i","j","segment","App","GameMap","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e1193240.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function SnakeSegment() {\n\treturn (\n\t\t<div className='snake-segment'>\n\t\t\t\n\t\t</div>\n\t)\n}\n","import React from 'react'\n\nexport default function Food() {\n\treturn (\n\t\t<div className=\"food\">\n\t\t\t\n\t\t</div>\n\t)\n}\n","import React from 'react'\n\nexport default function GridBlock() {\n\treturn (\n\t\t<div className='grid-block'>\n\t\t\t\n\t\t</div>\n\t)\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport SnakeBody from './SnakeBody';\nimport Food from './Food';\nimport GridBlock from './GridBlock';\n\nexport default function() {\n\tconst [ score, setScore ] = useState(0);\n\tconst [ direction, setDirection ] = useState('right');\n\tconst [ grid, setGrid ] = useState(initializeMap());\n\tconst [ snake, setSnake ] = useState([ { x: 3, y: 3 }, { x: 3, y: 2 }, { x: 3, y: 1 } ]);\n\tconst [ food, setFood ] = useState(repositionFood());\n\n\tplaceFood(grid, food);\n\tplaceSnake(grid, snake);\n\n\tdocument.addEventListener('keydown', (e) => onInput(e, direction, setDirection));\n\n\tfunction gameOver() {\n\t\tsetScore(0);\n\t\tsetFood(repositionFood());\n\t\tsetSnake([ { x: 3, y: 3 }, { x: 3, y: 2 }, { x: 3, y: 1 } ]);\n\t\tsetGrid(initializeMap());\n\t\tplaceSnake(grid, snake);\n\t\tplaceFood(grid, food);\n\t}\n\n\tfunction repositionSnake() {\n\t\tconst newHead = newPosition(direction, snake);\n\t\tconst newSnake = [ newHead, ...snake ];\n\n\t\tif (!proceed(newHead, snake, outOfBounds, collidedWithSelf)) {\n\t\t\talert('game over! ', score);\n\t\t\tgameOver();\n\t\t}\n\n\t\tif (ateFood(newHead, food)) {\n\t\t\tsetScore(score + 5);\n\t\t\tsetFood(repositionFood());\n\t\t} else {\n\t\t\tnewSnake.pop(); //depending on whether or not it encountered food\n\t\t}\n\n\t\tsetSnake(newSnake);\n\t\tsetGrid(initializeMap());\n\t\tplaceSnake(grid, snake);\n\t\tplaceFood(grid, food);\n\t}\n\n\tuseInterval(repositionSnake, 200);\n\n\tfunction useInterval(callback, delay) {\n\t\tconst savedCallback = useRef();\n\t\t// Remember the latest callback.\n\t\tuseEffect(\n\t\t\t() => {\n\t\t\t\tsavedCallback.current = callback;\n\t\t\t},\n\t\t\t[ callback ]\n\t\t);\n\t\t// Set up the interval.\n\t\tuseEffect(\n\t\t\t() => {\n\t\t\t\tfunction tick() {\n\t\t\t\t\tsavedCallback.current();\n\t\t\t\t}\n\t\t\t\tif (delay !== null) {\n\t\t\t\t\tlet id = setInterval(tick, delay);\n\t\t\t\t\treturn () => clearInterval(id);\n\t\t\t\t}\n\t\t\t},\n\t\t\t[ delay ]\n\t\t);\n\t}\n\n\treturn (\n\t\t<div className=\"\">\n\t\t\t<p>Score: {score}</p>\n\t\t\t<div className=\"main-map\">{grid}</div>;\n\t\t</div>\n\t);\n}\n\n//utility functions\n\nfunction placeFood(map, food) {\n\tmap[food.x][food.y] = <Food key={Math.random()} />;\n\treturn map;\n}\n\nfunction repositionFood() {\n\tconst x = Math.floor(Math.random() * 16);\n\tconst y = Math.floor(Math.random() * 16);\n\treturn { x, y };\n}\n\nfunction placeSnake(map, snake) {\n\tsnake.forEach(({ x, y }) => (map[x][y] = <SnakeBody key={Math.random()} />));\n\treturn map;\n}\n\nfunction initializeMap() {\n\tconst grid = [];\n\tfor (let i = 0; i < 16; i++) {\n\t\tgrid[i] = [];\n\t\tfor (let j = 0; j < 16; j++) {\n\t\t\tgrid[i][j] = <GridBlock key={Math.random()} />;\n\t\t}\n\t}\n\treturn grid;\n}\n\nfunction onInput({ keyCode }, direction, func) {\n\tswitch (keyCode) {\n\t\tcase 37: //left\n\t\t\tif (direction !== 'right') return func('left');\n\t\tcase 38: //up\n\t\t\tif (direction !== 'down') return func('up');\n\t\tcase 39: //right\n\t\t\tif (direction !== 'left') return func('right');\n\t\tcase 40: //down\n\t\t\tif (direction !== 'up') return func('down');\n\t\tdefault:\n\t\t\tbreak;\n\t}\n}\n\nfunction outOfBounds(x, y) {\n\tif (x < 0 || x > 15 || y < 0 || y > 15) return true;\n\treturn false;\n}\n\nfunction collidedWithSelf(x, y, snake) {\n\tsnake.forEach((segment) => {\n\t\tif (segment.x === x && segment.y === y) return true;\n\t});\n\treturn false;\n}\n\nfunction proceed({ x, y }, snake, func1, func2) {\n\treturn !func1(x, y) && !func2(x, y, snake);\n}\n\nfunction ateFood({ x, y }, food) {\n\tif (x === food.x && y === food.y) return true;\n\treturn false;\n}\n\nfunction newPosition(direction, snake) {\n\tconst newHead = {};\n\tswitch (direction) {\n\t\tcase 'right':\n\t\t\tnewHead.x = snake[0].x;\n\t\t\tnewHead.y = snake[0].y + 1;\n\t\t\tbreak;\n\t\tcase 'left':\n\t\t\tnewHead.x = snake[0].x;\n\t\t\tnewHead.y = snake[0].y - 1;\n\t\t\tbreak;\n\t\tcase 'up':\n\t\t\tnewHead.x = snake[0].x - 1;\n\t\t\tnewHead.y = snake[0].y;\n\t\t\tbreak;\n\t\tcase 'down':\n\t\t\tnewHead.x = snake[0].x + 1;\n\t\t\tnewHead.y = snake[0].y;\n\t\t\tbreak;\n\t}\n\treturn newHead;\n}\n","import React from 'react';\nimport './styles/App.css';\nimport GameMap from './GameMap';\nfunction App() {\n  return (\n    <div className=\"\">\n      <GameMap />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}