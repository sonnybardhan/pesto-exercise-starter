{"version":3,"sources":["utilities/Utilities.js","Map.js","App.js","index.js"],"names":["saveBestScore","setBestScore","score","prev","outOfBounds","x","y","selfCollision","snake","segment","getScoreFromLS","key","storage","localStorage","getItem","JSON","parse","saveScoreInLS","bestScore","setItem","stringify","placeSnake","grid","forEach","className","Math","random","placeFood","food","init","i","j","randomPosition","floor","nextPosition","direction","newHead","useAnimation","cb","fps","isPlaying","cbRef","useRef","animationFrameId","then","window","performance","now","elapsed","fpsInterval","useEffect","current","requestAnimationFrame","loop","cancelAnimationFrame","Map","initialMap","initialSnake","useState","setScore","rows","setRows","setSnake","setDirection","setFood","setFps","gameRunning","setGameRunning","message","setMessage","started","setStarted","setEventTime","keyboardInput","e","allow","lastEvent","indexOf","keyCode","preventDefault","gameReset","prevState","document","addEventListener","removeEventListener","newSnake","prevFps","pop","setUpFrame","style","textAlign","fontWeight","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.17416afc.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nexport default function() {\n\treturn {\n\t\tsaveBestScore(setBestScore, score) {\n\t\t\tsetBestScore((prev) => (score > prev ? score : prev));\n\t\t},\n\t\toutOfBounds({ x, y }) {\n\t\t\treturn x < 0 || x > 15 || y < 0 || y > 15;\n\t\t},\n\t\tselfCollision({ x, y }, snake) {\n\t\t\tfor (let segment of snake) {\n\t\t\t\tif (segment.x === x && segment.y === y) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tgetScoreFromLS(key) {\n\t\t\tconst storage = localStorage.getItem(key);\n\t\t\tif (storage) return JSON.parse(storage).score;\n\t\t\treturn 0;\n\t\t},\n\t\tsaveScoreInLS(key, bestScore) {\n\t\t\tlocalStorage.setItem(key, JSON.stringify({ score: bestScore }));\n\t\t},\n\t\tplaceSnake(grid, snake) {\n\t\t\tsnake.forEach(({ x, y }) => {\n\t\t\t\tgrid[x][y] = <div className=\"snake-segment\" key={Math.random()} />;\n\t\t\t});\n\t\t},\n\t\tplaceFood(grid, food) {\n\t\t\tgrid[food.x][food.y] = <div className=\"food\" key={Math.random()} />;\n\t\t},\n\t\tinit() {\n\t\t\tconst grid = [];\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tgrid[i] = [];\n\t\t\t\tfor (let j = 0; j < 16; j++) {\n\t\t\t\t\tgrid[i][j] = <div className=\"grid-block\" key={Math.random()} />;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn grid;\n\t\t},\n\t\trandomPosition() {\n\t\t\treturn {\n\t\t\t\tx: Math.floor(Math.random() * 16),\n\t\t\t\ty: Math.floor(Math.random() * 16)\n\t\t\t};\n\t\t},\n\t\tnextPosition(direction, snake) {\n\t\t\tconst newHead = { ...snake[0] };\n\t\t\tswitch (direction) {\n\t\t\t\tcase 'right':\n\t\t\t\t\tnewHead.y += 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'left':\n\t\t\t\t\tnewHead.y -= 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'up':\n\t\t\t\t\tnewHead.x -= 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'down':\n\t\t\t\t\tnewHead.x += 1;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn newHead;\n\t\t},\n\t\tuseAnimation(cb, fps, isPlaying) {\n\t\t\tconst cbRef = useRef();\n\t\t\tconst animationFrameId = useRef();\n\t\t\tconst then = useRef(window.performance.now());\n\t\t\tconst now = useRef();\n\t\t\tconst elapsed = useRef();\n\t\t\tconst fpsInterval = useRef(1000 / fps);\n\t\t\tuseEffect(\n\t\t\t\t() => {\n\t\t\t\t\tcbRef.current = cb;\n\t\t\t\t},\n\t\t\t\t[ cb ]\n\t\t\t);\n\t\t\tuseEffect(\n\t\t\t\t() => {\n\t\t\t\t\tfunction loop() {\n\t\t\t\t\t\tanimationFrameId.current = window.requestAnimationFrame(loop);\n\t\t\t\t\t\tnow.current = window.performance.now();\n\t\t\t\t\t\telapsed.current = now.current - then.current;\n\t\t\t\t\t\tif (elapsed.current > fpsInterval.current) {\n\t\t\t\t\t\t\tthen.current = now.current - elapsed.current % fpsInterval.current;\n\t\t\t\t\t\t\tcbRef.current();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (isPlaying) {\n\t\t\t\t\t\tanimationFrameId.current = window.requestAnimationFrame(loop);\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\twindow.cancelAnimationFrame(animationFrameId.current);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t[ isPlaying ]\n\t\t\t);\n\t\t}\n\t};\n}\n","import React, { useState, useEffect } from 'react';\nimport Utilities from './utilities/Utilities';\n\nconst {\n\tsaveBestScore,\n\toutOfBounds,\n\tselfCollision,\n\tgetScoreFromLS,\n\tsaveScoreInLS,\n\tplaceSnake,\n\tplaceFood,\n\tinit,\n\trandomPosition,\n\tnextPosition,\n\tuseAnimation\n} = Utilities();\n\nconst Map = () => {\n\tconst initialMap = init();\n\tconst initialSnake = [ { x: 3, y: 3 }, { x: 3, y: 2 }, { x: 3, y: 1 } ];\n\tconst initialDirection = 'right';\n\tconst key = 'snakeGame';\n\tconst initialFps = 9;\n\tconst [ score, setScore ] = useState(0);\n\tconst [ rows, setRows ] = useState(initialMap);\n\tconst [ snake, setSnake ] = useState(initialSnake);\n\tconst [ direction, setDirection ] = useState(initialDirection);\n\tconst [ food, setFood ] = useState(randomPosition);\n\tconst [ fps, setFps ] = useState(initialFps);\n\tconst [ gameRunning, setGameRunning ] = useState(false);\n\tconst [ bestScore, setBestScore ] = useState(getScoreFromLS(key));\n\tconst [ message, setMessage ] = useState('');\n\tconst [ started, setStarted ] = useState(false);\n\tconst [ eventTime, setEventTime ] = useState(performance.now());\n\n\tuseEffect(\n\t\t() => {\n\t\t\tif (bestScore) {\n\t\t\t\tsaveScoreInLS(key, bestScore);\n\t\t\t}\n\t\t},\n\t\t[ bestScore ]\n\t);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tdocument.addEventListener('keydown', keyboardInput);\n\t\t\treturn () => {\n\t\t\t\tdocument.removeEventListener('keydown', keyboardInput);\n\t\t\t};\n\t\t},\n\t\t[ direction ]\n\t);\n\n\tfunction keyboardInput(e) {\n\t\tlet allow = false;\n\n\t\tsetEventTime((lastEvent) => {\n\t\t\tconst now = performance.now();\n\t\t\tconst diff = Math.floor(now - lastEvent) / 1000;\n\t\t\tif (diff > 0.075) {\n\t\t\t\tallow = true;\n\t\t\t}\n\t\t\treturn now;\n\t\t});\n\n\t\tif ([ 32, 37, 38, 39, 40 ].indexOf(e.keyCode) > -1) {\n\t\t\te.preventDefault();\n\t\t}\n\n\t\tif (allow) {\n\t\t\tswitch (e.keyCode) {\n\t\t\t\tcase 27: //escape\n\t\t\t\t\treturn gameReset();\n\t\t\t\tcase 32: //space\n\t\t\t\t\treturn setGameRunning((prevState) => {\n\t\t\t\t\t\tif (!started) {\n\t\t\t\t\t\t\tsetStarted(true);\n\t\t\t\t\t\t\tsetDirection('right');\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn !prevState;\n\t\t\t\t\t});\n\t\t\t\tcase 37: //left\n\t\t\t\t\tif (direction !== 'right') return setDirection('left');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 38: //up\n\t\t\t\t\tif (direction !== 'down') return setDirection('up');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 39: //right\n\t\t\t\t\tif (direction !== 'left') return setDirection('right');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 40: //down\n\t\t\t\t\tif (direction !== 'up') return setDirection('down');\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction repositionSnake() {\n\t\tconst newHead = nextPosition(direction, snake);\n\t\tconst newSnake = [ newHead, ...snake ];\n\t\tif (outOfBounds(newHead) || selfCollision(newHead, snake)) return onCrash();\n\t\tif (newHead.x === food.x && newHead.y === food.y) onEat();\n\t\telse newSnake.pop();\n\t\tsetUpFrame(newSnake);\n\t}\n\n\tfunction onEat() {\n\t\tsetScore(score + 5);\n\t\tsetFood(randomPosition);\n\t\tsetFps((prevFps) => (score % 10 === 0 ? prevFps + 1 : prevFps));\n\t}\n\n\tfunction setUpFrame(newSnake) {\n\t\tsetSnake(newSnake);\n\t\tplaceSnake(initialMap, snake);\n\t\tplaceFood(initialMap, food);\n\t\tsetRows(initialMap);\n\t}\n\n\tfunction onCrash() {\n\t\tsetStarted(false);\n\t\tsaveBestScore(setBestScore, score);\n\t\tsetMessage(score);\n\t\treturn gameReset();\n\t}\n\n\tfunction gameReset() {\n\t\tsetMessage(score);\n\t\tsetScore(0);\n\t\tsetRows(init);\n\t\tsetSnake(initialSnake);\n\t\tsetDirection('right');\n\t\tsetFood(randomPosition);\n\t\tsetStarted(false);\n\t\tsetFps(initialFps);\n\t\tsetGameRunning(false);\n\t}\n\n\tuseAnimation(repositionSnake, fps, gameRunning);\n\n\treturn (\n\t\t<div className=\"\">\n\t\t\t<h1 style={{ textAlign: 'center' }}>Snake!</h1>\n\t\t\t<h2>\n\t\t\t\t<span>{gameRunning ? `Score: ${score}` : null}</span>\n\t\t\t</h2>\n\t\t\t<div className=\"main-map\">\n\t\t\t\t{gameRunning ? (\n\t\t\t\t\trows\n\t\t\t\t) : (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h1 style={{ textAlign: 'center', fontWeight: 'bold' }}>\n\t\t\t\t\t\t\t{message && !started ? 'Game over!' : null}\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<h2 style={{ textAlign: 'center' }}>\n\t\t\t\t\t\t\t{message && !started ? `You scored ${0 || message}` : null}\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t<h2 style={{ textAlign: 'center' }}>PRESS SPACEBAR TO {started ? 'RESUME' : 'PLAY'}</h2>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<h2 style={{ textAlign: 'right' }}>\n\t\t\t\t<span>Best: {bestScore ? `${bestScore}` : 0}</span>\n\t\t\t</h2>\n\t\t</div>\n\t);\n};\n\nexport default Map;\n","import React from 'react';\nimport './styles/newApp.css';\nimport Map from './Map.js';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"\">\n\t\t\t<Map />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}